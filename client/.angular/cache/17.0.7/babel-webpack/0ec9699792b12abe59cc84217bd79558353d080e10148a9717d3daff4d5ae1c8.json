{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment\";\nimport { Observable, Observer } from 'rxjs';\n// import * as jwt_decode from 'jwt-decode';\nimport { jwtDecode } from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    get accessToken() {\n      return localStorage.getItem(\"accessToken\");\n    }\n    set accessToken(value) {\n      if (!value) {\n        localStorage.removeItem(\"accessToken\");\n      } else {\n        localStorage.setItem(\"accessToken\", value);\n        const decoded = jwtDecode(value);\n        //            if(decoded && decoded.user) {\n        //                localStorage.setItem(\"user\", JSON.stringify(decoded.user));\n        //            }\n      }\n      this._accessTokenObserver.next(value);\n    }\n    get user() {\n      let parsed = localStorage.getItem(\"user\");\n      if (parsed) {\n        return JSON.parse(parsed);\n      } else {\n        return {\n          firstName: \"\",\n          lastName: \"\"\n        };\n      }\n    }\n    constructor(_http) {\n      this._http = _http;\n      this._baseUrl = environment.serverRoot;\n      this._endpoints = {\n        signUp: `${this._baseUrl}${environment.endpoints.auth.signUp}`,\n        signIn: `${this._baseUrl}${environment.endpoints.auth.signIn}`\n      };\n      this.accessToken$ = Observable.create(observer => {\n        this._accessTokenObserver = observer;\n        this._accessTokenObserver.next(this.accessToken);\n      });\n      this.accessToken$.subscribe();\n    }\n    authOperation(url, user) {\n      return this._http.post(url, user, {\n        responseType: 'text'\n      }).toPromise().then(token => {\n        this.accessToken = token;\n        return token;\n      });\n    }\n    signUp(user) {\n      return this.authOperation(this._endpoints.signUp, user);\n    }\n    signIn(user) {\n      return this.authOperation(this._endpoints.signIn, user);\n    }\n    logout() {\n      this.accessToken = \"\";\n      return Promise.resolve();\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}