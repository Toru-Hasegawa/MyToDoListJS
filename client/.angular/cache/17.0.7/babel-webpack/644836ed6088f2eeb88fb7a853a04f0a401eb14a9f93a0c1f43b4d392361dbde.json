{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { AuthService } from '../services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    isAllowedRoute(url) {\n      return this._allowedUrls.reduce((acc, route) => {\n        return acc || url.indexOf(route) >= 0;\n      }, false);\n    }\n    constructor(_authService) {\n      this._authService = _authService;\n      this._allowedUrls = ['api/users/signup', 'api/users/signIn'];\n    }\n    intercept(req, next) {\n      if (this.isAllowedRoute(req.url)) {\n        return next.handle(req);\n      }\n      const accessToken = this._authService.accessToken;\n      const headers = req.headers.set('Content-Type', 'application/json').set('Authorization', `Bearer ${accessToken}`);\n      const authReq = req.clone({\n        headers\n      });\n      return next.handle(authReq);\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}