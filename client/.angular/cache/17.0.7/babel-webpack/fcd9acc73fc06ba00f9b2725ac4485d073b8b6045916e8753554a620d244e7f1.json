{"ast":null,"code":"import { ToDosService } from \"../services/todos.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/todos.service\";\nexport let ToDosViewModel = /*#__PURE__*/(() => {\n  class ToDosViewModel {\n    constructor(_todosService) {\n      this._todosService = _todosService;\n      this.loading = false;\n      this.todos = [];\n      this.newTodo = {};\n      this.updatingTodo = {};\n    }\n    clearNewToDo() {\n      this.newTodo = {};\n    }\n    clearUpdatingToDo() {\n      this.updatingTodo = {};\n    }\n    clearAll() {\n      this.clearNewToDo();\n      this.clearUpdatingToDo();\n    }\n    initialize() {\n      return this.refresh();\n    }\n    setUpdatingToDo(todo) {\n      this.updatingTodo = todo;\n    }\n    refresh() {\n      this.loading = true;\n      return this._todosService.getAll().then(todos => {\n        this.todos = todos;\n        this.loading = false;\n        this.clearAll();\n      });\n    }\n    create() {\n      this.loading = true;\n      return this._todosService.create(this.newTodo).then(() => this.refresh());\n    }\n    update() {\n      this.loading = true;\n      return this._todosService.update(this.updatingTodo.id, this.updatingTodo).then(() => this.refresh());\n    }\n    updateStatus() {\n      this.loading = true;\n      return this._todosService.updateStatus(this.updatingTodo.id, this.updatingTodo.isCompleted).then(() => this.refresh());\n    }\n    delete(id) {\n      this.loading = true;\n      return this._todosService.delete(id).then(() => this.refresh());\n    }\n    static #_ = this.ɵfac = function ToDosViewModel_Factory(t) {\n      return new (t || ToDosViewModel)(i0.ɵɵinject(i1.ToDosService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ToDosViewModel,\n      factory: ToDosViewModel.ɵfac\n    });\n  }\n  return ToDosViewModel;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}